<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAICAQAAEABADoAgAANgAAACAgAAABAAgAqAgAAB4DAAAgIAAAAQAgAKgQAADGCwAAKAAAACAA
        AABAAAAAAQAEAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICA
        AACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAd3d3d3AAAAAAAAAAAAAHiIiI6I6HcAAAAAAAAAAAeIjo6Ih4yHAAAA
        AAAAAAB46Ih4h+iI5wAAAAAAAAAIjniIeOiHfncAAAAABwAAB4h4iOiIiIeMAAB3N3N3c3aIeIiIiI6M
        hwAHd3OKeIc36If/joiIiOcAB7d3e3eKd3iHiIiHh+dwAAh3uoeoiDd+iGd3joiMAAAHiog4f4e3OIhT
        F3eOcAAACIg4c4iHend3NxNXeAAAAACLh3iIc3g3c3ExdwAAAAAAiHtze3endzc3czAAAAAAAAiKeDdz
        dwdzc3FwAAAAAAAABzdzdwAIOJc3MAAAAAAAAAc3uHcwCDh3dzUAAAAAAABzd4eDdwiLe3lzcAAAAAAA
        c3i4eDcIeHd3NXAAAAAAB7d4iLiQCIiJg1JAAAAAAAdziIiIcAi4i4MUMAAAAAAIeIiIuDAIh4eXYXAA
        AAAAALOPiIhwB3c3dDRwAAAAAACHuPiLcAh3d3NDAAAAAAAAeHM4tXAACHdXcAAAAAAAAAiIM3M1AAAA
        AAAAAAAAAAAIiIiItwAAAAAAAAAAAAAAAPuLh4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP/////////////gD///AAP//gAD//wAA//4AAP++AADwAAAA4AAAAOAAAAHgAAAD4AA
        AB+AAAA/wAAA/8AAAf/gAgH/+A4B//gGAP/wAgB/8AIAf+AGAH/gBgB/4AYAf/AGAH/wBgD/8AeB//gD
        ///4A////Af/////////////KAAAACAAAABAAAAAAQAIAAAAAAAABAAAAAAAAAAAAAAAAQAAAAEAAAAA
        AAAtLS0ANjAuADg3NQA0PkkAJ3lXABpJegAgQWIAM09gACNMdAApUncANWV5AEdHRwBOVFkAWVhXAGBe
        WwBGelkARVhpAEV6ZwBLZX8AWHJ8AGhnZwBrd3sAdnZ2AIZ5bgCSe2UAmH9oAI9+cACBfn4AoH9gAD+o
        fQBGimYASo1pAEmWbwBYj3EAQpZ0AEmUcgBNm3YAVZh3AHWCYgBtmW8AdIh5AGqVegB8nHYAR6B7AEyj
        eABRpHsAW6V4AJaCbACehW0AjIh/AJODdACbhXIArIZmAKKIbgC1jmgAtpBuALqQbgCji3EAtZJyALuU
        cQC9pXkAwZx0AMWeeQDDoXoAyaJ6ANGkegDVqHwA2al/AChWhQA2XIMAPV+SADhkhAA8dosAP2eQAD91
        kgBDZ4gATHKPAFx4hwBJbpMASnSVAFN3lwBgdYkAd3+DAGp8kQBHcqAAVXujAFuCkgBvgo4Ac4KPAHqV
        hwB8nY4AZYmWAGKWkwB9lpoASKiAAFWlgABfpoAAV6+FAFuqggBfrogAXrGHAF6yiQBopYYAYauGAGen
        iQBkrooAaq6MAHqqjgBmtYwAd7CPAGyvkgBtupMAc72YAEqKogBbhKgAVJSnAFqftwBkiqwAcoynAHeR
        rwBjiboAapK4AHKXuwBkqb0Af6m0AG/CkgBoxZkAdsKbAHvJogBsjcYAZ5jLAHadwwBnrMMAfaPJAHW6
        ygBuutAAfsXSAIaHhwCTi4MAlZCJAImVkACDl50Ak5KTAKSYhwCilo0AtpyFAKKalQCrm5IAi6+ZAJiq
        mQCMtZoArqGVALKkmgCJm6EAiLmjAJm3qQCMr7sAgbC6AJi4vgC6rKQAq7aoAKa+sgC3t7cAxqWBAMum
        gQDNqIIAza2KANOsggDZrYIA0q6JAN2whQDVsIoA2rOLAMKpkwDUtJEA27aRAN+5kwDau5kA4LGGAOO3
        jQDkuI0A6LuNAOO7kwDsvpQA4r2bAMW0rwDLtrIAwruwAILPqQCe0KgAjda0AJbevAC6zrMAttC1AO7D
        lgDnwJoA68ObAPPElADzxpwA89CbAMrFvgDcy7oA4sKjAO3IowDryqkA8MqnAP/KogDzzqoA7MeyAOjM
        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
        ABQAAAAAAAMDBDlrVKhoxZn/X7OJ/16xh/9erYX/X62G/1uqg/9Qpnv/d7CP/6u2qP9iqoX/P6h9/22Z
        b//RpXv/98Sd/9u8mP+toJf/9Ozl///77f/txp7/57+T/+zIo//sza3/6Myw/+DEpv/VtJL/yaV9/9Kk
        ev9UPi6KAAAAAAAAAAAOHBUkYamK7G6/mf9bqIH/YKuG/2Gth/9kror/XaqC/1Cke/+MtZr/wruw/2il
        hv9IqID/VJly/72lef//yqL/886q/6yfkv/Gwr//zdHU/9zLuv/xw5b/7sSa/+bEof/lw6X/2rua/9Gu
        iv/ZroL/sopm8RYQDCQAAAAAAAAAAA8eFSJrq43fesWh/2W0jP9qtpD/bLeR/2m1j/9froj/WKqD/7bQ
        tf/Oyb7/Z6eJ/1evhf9HoHv/e510/+2/lf//4LH/sJyL/0Zlgv8rWIT/S3KX/6Kalf/luY//5ryU/963
        kf/atI7/37OK/7SMafA0KBxeAAAAAAAAAAAAAAAAHDImD26qj9CO1rT/cbyY/3K+mP9zv5n/b7uV/1+z
        i/90vJT/6/XY/9DYxP9pro7/XbKI/1WlgP9ClnT/e5p2+/PMk+vBp5D4MFmC/yBMe/8YR3j/IVKD/4yI
        f//brYP/5LmQ/+K5kP+xjGvaZE05TgAAAAAAAAAAAAAAAAAAAAAAAAAAWYt1o6DpyP96w5//cr+Y/3O/
        mf9xv5j/ZriO/57QqP/x9tf/us6z/2uvjv9ds4n/X6eA/02bdv82iGXmbYdus3h9hOk5XIP/KFB3/ydN
        cf8cTH3/OF+E/6aPcf+1km/3iG9anV1JNykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvTT88lt68/43W
        tf91v5v/c7+Z/2+/lP9pro//jK+7/5iswv99mJf/WI9x/1Oeef9dqIL/W6V4/0uHcuYpV3rUI09/9zRa
        gf84XIH/J0xx/yFLc/8uXIz/V1pXvIRoTk4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABQf2iBl+XA/4LPqf9ywZj/ZrOI/2KWk/9sjcb/YYe+/12Alf9Jd1r/Ropm/1qrgP9bo3jgSXSD1z1f
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAX3R5E5q/xp2cydPamdHe84vM2vh/vcvsZp+s0VOIkpguTVUwAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJYXg4sPD4zHywuRjRNVCwyTVQFAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP////////g///+AB//+AAH//AAB//gAAPwYAADAAAAAgAAAAQAAAAMAAAADAAAABwAA
        AA+AAAAfgAAAf8AAAP/AAAH/8AQA//AAAH/gAAB/4AAAf+AAAD/gAAA/4AAAf+AAAH/gBAB/4AMA//AB
        4//wAf//+AP///4P////////
</value>
  </data>
</root>